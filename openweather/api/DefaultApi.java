/*
 * OpenWeather Proxy API
 * API for fetching weather, air quality, and geocoding data from OpenWeatherMap.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openweather.api;

import openweather.ApiCallback;
import openweather.ApiClient;
import openweather.ApiException;
import openweather.ApiResponse;
import openweather.Configuration;
import openweather.Pair;
import openweather.ProgressRequestBody;
import openweather.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import openweather.model.Data25AirPollutionGet200Response;
import openweather.model.Data25ForecastGet200Response;
import openweather.model.Data25WeatherGet200Response;
import openweather.model.Geo10DirectGet200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for data25AirPollutionGet
     * @param lat Latitude of the location (e.g., \&quot;51.5074\&quot;). (required)
     * @param lon Longitude of the location (e.g., \&quot;-0.1278\&quot;). (required)
     * @param appid API key for authentication. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for air quality data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call data25AirPollutionGetCall(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nonnull String appid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/2.5/air_pollution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (appid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appid", appid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call data25AirPollutionGetValidateBeforeCall(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nonnull String appid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling data25AirPollutionGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling data25AirPollutionGet(Async)");
        }

        // verify the required parameter 'appid' is set
        if (appid == null) {
            throw new ApiException("Missing the required parameter 'appid' when calling data25AirPollutionGet(Async)");
        }

        return data25AirPollutionGetCall(lat, lon, appid, _callback);

    }

    /**
     * Get air quality data
     * Fetch air quality data for specific coordinates.
     * @param lat Latitude of the location (e.g., \&quot;51.5074\&quot;). (required)
     * @param lon Longitude of the location (e.g., \&quot;-0.1278\&quot;). (required)
     * @param appid API key for authentication. (required)
     * @return Data25AirPollutionGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for air quality data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Data25AirPollutionGet200Response data25AirPollutionGet(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nonnull String appid) throws ApiException {
        ApiResponse<Data25AirPollutionGet200Response> localVarResp = data25AirPollutionGetWithHttpInfo(lat, lon, appid);
        return localVarResp.getData();
    }

    /**
     * Get air quality data
     * Fetch air quality data for specific coordinates.
     * @param lat Latitude of the location (e.g., \&quot;51.5074\&quot;). (required)
     * @param lon Longitude of the location (e.g., \&quot;-0.1278\&quot;). (required)
     * @param appid API key for authentication. (required)
     * @return ApiResponse&lt;Data25AirPollutionGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for air quality data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Data25AirPollutionGet200Response> data25AirPollutionGetWithHttpInfo(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nonnull String appid) throws ApiException {
        okhttp3.Call localVarCall = data25AirPollutionGetValidateBeforeCall(lat, lon, appid, null);
        Type localVarReturnType = new TypeToken<Data25AirPollutionGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get air quality data (asynchronously)
     * Fetch air quality data for specific coordinates.
     * @param lat Latitude of the location (e.g., \&quot;51.5074\&quot;). (required)
     * @param lon Longitude of the location (e.g., \&quot;-0.1278\&quot;). (required)
     * @param appid API key for authentication. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for air quality data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call data25AirPollutionGetAsync(@javax.annotation.Nonnull BigDecimal lat, @javax.annotation.Nonnull BigDecimal lon, @javax.annotation.Nonnull String appid, final ApiCallback<Data25AirPollutionGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = data25AirPollutionGetValidateBeforeCall(lat, lon, appid, _callback);
        Type localVarReturnType = new TypeToken<Data25AirPollutionGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for data25ForecastGet
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for weather forecast data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call data25ForecastGetCall(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/2.5/forecast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (appid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appid", appid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call data25ForecastGetValidateBeforeCall(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling data25ForecastGet(Async)");
        }

        // verify the required parameter 'appid' is set
        if (appid == null) {
            throw new ApiException("Missing the required parameter 'appid' when calling data25ForecastGet(Async)");
        }

        return data25ForecastGetCall(q, appid, _callback);

    }

    /**
     * Get 5-day/3-hour weather forecast
     * Retrieve weather forecasts at 3-hour intervals for the next 5 days.
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @return Data25ForecastGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for weather forecast data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Data25ForecastGet200Response data25ForecastGet(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid) throws ApiException {
        ApiResponse<Data25ForecastGet200Response> localVarResp = data25ForecastGetWithHttpInfo(q, appid);
        return localVarResp.getData();
    }

    /**
     * Get 5-day/3-hour weather forecast
     * Retrieve weather forecasts at 3-hour intervals for the next 5 days.
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @return ApiResponse&lt;Data25ForecastGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for weather forecast data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Data25ForecastGet200Response> data25ForecastGetWithHttpInfo(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid) throws ApiException {
        okhttp3.Call localVarCall = data25ForecastGetValidateBeforeCall(q, appid, null);
        Type localVarReturnType = new TypeToken<Data25ForecastGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get 5-day/3-hour weather forecast (asynchronously)
     * Retrieve weather forecasts at 3-hour intervals for the next 5 days.
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for weather forecast data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call data25ForecastGetAsync(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid, final ApiCallback<Data25ForecastGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = data25ForecastGetValidateBeforeCall(q, appid, _callback);
        Type localVarReturnType = new TypeToken<Data25ForecastGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for data25WeatherGet
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for current weather data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call data25WeatherGetCall(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/2.5/weather";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (appid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appid", appid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call data25WeatherGetValidateBeforeCall(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling data25WeatherGet(Async)");
        }

        // verify the required parameter 'appid' is set
        if (appid == null) {
            throw new ApiException("Missing the required parameter 'appid' when calling data25WeatherGet(Async)");
        }

        return data25WeatherGetCall(q, appid, _callback);

    }

    /**
     * Get current weather data for a city
     * Fetch current weather details such as temperature, humidity, and weather description.
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @return Data25WeatherGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for current weather data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Data25WeatherGet200Response data25WeatherGet(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid) throws ApiException {
        ApiResponse<Data25WeatherGet200Response> localVarResp = data25WeatherGetWithHttpInfo(q, appid);
        return localVarResp.getData();
    }

    /**
     * Get current weather data for a city
     * Fetch current weather details such as temperature, humidity, and weather description.
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @return ApiResponse&lt;Data25WeatherGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for current weather data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Data25WeatherGet200Response> data25WeatherGetWithHttpInfo(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid) throws ApiException {
        okhttp3.Call localVarCall = data25WeatherGetValidateBeforeCall(q, appid, null);
        Type localVarReturnType = new TypeToken<Data25WeatherGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get current weather data for a city (asynchronously)
     * Fetch current weather details such as temperature, humidity, and weather description.
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for current weather data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call data25WeatherGetAsync(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid, final ApiCallback<Data25WeatherGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = data25WeatherGetValidateBeforeCall(q, appid, _callback);
        Type localVarReturnType = new TypeToken<Data25WeatherGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for geo10DirectGet
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @param limit Maximum number of results to return. (optional, default to 5)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for geocoding data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geo10DirectGetCall(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geo/1.0/direct";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (appid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appid", appid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geo10DirectGetValidateBeforeCall(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid, @javax.annotation.Nullable Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling geo10DirectGet(Async)");
        }

        // verify the required parameter 'appid' is set
        if (appid == null) {
            throw new ApiException("Missing the required parameter 'appid' when calling geo10DirectGet(Async)");
        }

        return geo10DirectGetCall(q, appid, limit, _callback);

    }

    /**
     * Geocode a location
     * Fetch geographic coordinates for a given city, state, and country.
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @param limit Maximum number of results to return. (optional, default to 5)
     * @return List&lt;Geo10DirectGet200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for geocoding data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Geo10DirectGet200ResponseInner> geo10DirectGet(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid, @javax.annotation.Nullable Integer limit) throws ApiException {
        ApiResponse<List<Geo10DirectGet200ResponseInner>> localVarResp = geo10DirectGetWithHttpInfo(q, appid, limit);
        return localVarResp.getData();
    }

    /**
     * Geocode a location
     * Fetch geographic coordinates for a given city, state, and country.
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @param limit Maximum number of results to return. (optional, default to 5)
     * @return ApiResponse&lt;List&lt;Geo10DirectGet200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for geocoding data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Geo10DirectGet200ResponseInner>> geo10DirectGetWithHttpInfo(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid, @javax.annotation.Nullable Integer limit) throws ApiException {
        okhttp3.Call localVarCall = geo10DirectGetValidateBeforeCall(q, appid, limit, null);
        Type localVarReturnType = new TypeToken<List<Geo10DirectGet200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Geocode a location (asynchronously)
     * Fetch geographic coordinates for a given city, state, and country.
     * @param q Name of the city (or city, state, and country). (required)
     * @param appid API key for authentication. (required)
     * @param limit Maximum number of results to return. (optional, default to 5)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response for geocoding data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Invalid API key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geo10DirectGetAsync(@javax.annotation.Nonnull String q, @javax.annotation.Nonnull String appid, @javax.annotation.Nullable Integer limit, final ApiCallback<List<Geo10DirectGet200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = geo10DirectGetValidateBeforeCall(q, appid, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Geo10DirectGet200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
