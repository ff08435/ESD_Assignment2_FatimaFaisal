/*
 * OpenWeather Proxy API
 * API for fetching weather, air quality, and geocoding data from OpenWeatherMap.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openweather.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import openweather.model.Data25WeatherGet200ResponseMain;
import openweather.model.Data25WeatherGet200ResponseWeatherInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import openweather.JSON;

/**
 * Data25ForecastGet200ResponseListInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-15T07:32:12.530684852Z[Etc/UTC]", comments = "Generator version: 7.17.0-SNAPSHOT")
public class Data25ForecastGet200ResponseListInner {
  public static final String SERIALIZED_NAME_DT_TXT = "dt_txt";
  @SerializedName(SERIALIZED_NAME_DT_TXT)
  @javax.annotation.Nullable
  private String dtTxt;

  public static final String SERIALIZED_NAME_MAIN = "main";
  @SerializedName(SERIALIZED_NAME_MAIN)
  @javax.annotation.Nullable
  private Data25WeatherGet200ResponseMain main;

  public static final String SERIALIZED_NAME_WEATHER = "weather";
  @SerializedName(SERIALIZED_NAME_WEATHER)
  @javax.annotation.Nullable
  private List<Data25WeatherGet200ResponseWeatherInner> weather = new ArrayList<>();

  public Data25ForecastGet200ResponseListInner() {
  }

  public Data25ForecastGet200ResponseListInner dtTxt(@javax.annotation.Nullable String dtTxt) {
    this.dtTxt = dtTxt;
    return this;
  }

  /**
   * Get dtTxt
   * @return dtTxt
   */
  @javax.annotation.Nullable
  public String getDtTxt() {
    return dtTxt;
  }

  public void setDtTxt(@javax.annotation.Nullable String dtTxt) {
    this.dtTxt = dtTxt;
  }


  public Data25ForecastGet200ResponseListInner main(@javax.annotation.Nullable Data25WeatherGet200ResponseMain main) {
    this.main = main;
    return this;
  }

  /**
   * Get main
   * @return main
   */
  @javax.annotation.Nullable
  public Data25WeatherGet200ResponseMain getMain() {
    return main;
  }

  public void setMain(@javax.annotation.Nullable Data25WeatherGet200ResponseMain main) {
    this.main = main;
  }


  public Data25ForecastGet200ResponseListInner weather(@javax.annotation.Nullable List<Data25WeatherGet200ResponseWeatherInner> weather) {
    this.weather = weather;
    return this;
  }

  public Data25ForecastGet200ResponseListInner addWeatherItem(Data25WeatherGet200ResponseWeatherInner weatherItem) {
    if (this.weather == null) {
      this.weather = new ArrayList<>();
    }
    this.weather.add(weatherItem);
    return this;
  }

  /**
   * Get weather
   * @return weather
   */
  @javax.annotation.Nullable
  public List<Data25WeatherGet200ResponseWeatherInner> getWeather() {
    return weather;
  }

  public void setWeather(@javax.annotation.Nullable List<Data25WeatherGet200ResponseWeatherInner> weather) {
    this.weather = weather;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Data25ForecastGet200ResponseListInner data25ForecastGet200ResponseListInner = (Data25ForecastGet200ResponseListInner) o;
    return Objects.equals(this.dtTxt, data25ForecastGet200ResponseListInner.dtTxt) &&
        Objects.equals(this.main, data25ForecastGet200ResponseListInner.main) &&
        Objects.equals(this.weather, data25ForecastGet200ResponseListInner.weather);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dtTxt, main, weather);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Data25ForecastGet200ResponseListInner {\n");
    sb.append("    dtTxt: ").append(toIndentedString(dtTxt)).append("\n");
    sb.append("    main: ").append(toIndentedString(main)).append("\n");
    sb.append("    weather: ").append(toIndentedString(weather)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("dt_txt", "main", "weather", "dt", "visibility", "pop", "sys", "clouds", "wind", "rain", "snow"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Data25ForecastGet200ResponseListInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Data25ForecastGet200ResponseListInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in Data25ForecastGet200ResponseListInner is not found in the empty JSON string", Data25ForecastGet200ResponseListInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Data25ForecastGet200ResponseListInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `Data25ForecastGet200ResponseListInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dt_txt") != null && !jsonObj.get("dt_txt").isJsonNull()) && !jsonObj.get("dt_txt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `dt_txt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dt_txt").toString()));
      }
      // validate the optional field `main`
      if (jsonObj.get("main") != null && !jsonObj.get("main").isJsonNull()) {
        Data25WeatherGet200ResponseMain.validateJsonElement(jsonObj.get("main"));
      }
      if (jsonObj.get("weather") != null && !jsonObj.get("weather").isJsonNull()) {
        JsonArray jsonArrayweather = jsonObj.getAsJsonArray("weather");
        if (jsonArrayweather != null) {
          // ensure the json data is an array
          if (!jsonObj.get("weather").isJsonArray()) {
            throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `weather` to be an array in the JSON string but got `%s`", jsonObj.get("weather").toString()));
          }

          // validate the optional field `weather` (array)
          for (int i = 0; i < jsonArrayweather.size(); i++) {
            Data25WeatherGet200ResponseWeatherInner.validateJsonElement(jsonArrayweather.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Data25ForecastGet200ResponseListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Data25ForecastGet200ResponseListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Data25ForecastGet200ResponseListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Data25ForecastGet200ResponseListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<Data25ForecastGet200ResponseListInner>() {
           @Override
           public void write(JsonWriter out, Data25ForecastGet200ResponseListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Data25ForecastGet200ResponseListInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Data25ForecastGet200ResponseListInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Data25ForecastGet200ResponseListInner
   * @throws IOException if the JSON string is invalid with respect to Data25ForecastGet200ResponseListInner
   */
  public static Data25ForecastGet200ResponseListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Data25ForecastGet200ResponseListInner.class);
  }

  /**
   * Convert an instance of Data25ForecastGet200ResponseListInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

