/*
 * OpenWeather Proxy API
 * API for fetching weather, air quality, and geocoding data from OpenWeatherMap.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openweather.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import openweather.JSON;

/**
 * Data25AirPollutionGet200ResponseListInnerComponents
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-15T07:32:12.530684852Z[Etc/UTC]", comments = "Generator version: 7.17.0-SNAPSHOT")
public class Data25AirPollutionGet200ResponseListInnerComponents {
  public static final String SERIALIZED_NAME_PM25 = "pm2_5";
  @SerializedName(SERIALIZED_NAME_PM25)
  @javax.annotation.Nullable
  private BigDecimal pm25;

  public static final String SERIALIZED_NAME_PM10 = "pm10";
  @SerializedName(SERIALIZED_NAME_PM10)
  @javax.annotation.Nullable
  private BigDecimal pm10;

  public static final String SERIALIZED_NAME_CO = "co";
  @SerializedName(SERIALIZED_NAME_CO)
  @javax.annotation.Nullable
  private BigDecimal co;

  public Data25AirPollutionGet200ResponseListInnerComponents() {
  }

  public Data25AirPollutionGet200ResponseListInnerComponents pm25(@javax.annotation.Nullable BigDecimal pm25) {
    this.pm25 = pm25;
    return this;
  }

  /**
   * Get pm25
   * @return pm25
   */
  @javax.annotation.Nullable
  public BigDecimal getPm25() {
    return pm25;
  }

  public void setPm25(@javax.annotation.Nullable BigDecimal pm25) {
    this.pm25 = pm25;
  }


  public Data25AirPollutionGet200ResponseListInnerComponents pm10(@javax.annotation.Nullable BigDecimal pm10) {
    this.pm10 = pm10;
    return this;
  }

  /**
   * Get pm10
   * @return pm10
   */
  @javax.annotation.Nullable
  public BigDecimal getPm10() {
    return pm10;
  }

  public void setPm10(@javax.annotation.Nullable BigDecimal pm10) {
    this.pm10 = pm10;
  }


  public Data25AirPollutionGet200ResponseListInnerComponents co(@javax.annotation.Nullable BigDecimal co) {
    this.co = co;
    return this;
  }

  /**
   * Get co
   * @return co
   */
  @javax.annotation.Nullable
  public BigDecimal getCo() {
    return co;
  }

  public void setCo(@javax.annotation.Nullable BigDecimal co) {
    this.co = co;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Data25AirPollutionGet200ResponseListInnerComponents data25AirPollutionGet200ResponseListInnerComponents = (Data25AirPollutionGet200ResponseListInnerComponents) o;
    return Objects.equals(this.pm25, data25AirPollutionGet200ResponseListInnerComponents.pm25) &&
        Objects.equals(this.pm10, data25AirPollutionGet200ResponseListInnerComponents.pm10) &&
        Objects.equals(this.co, data25AirPollutionGet200ResponseListInnerComponents.co);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pm25, pm10, co);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Data25AirPollutionGet200ResponseListInnerComponents {\n");
    sb.append("    pm25: ").append(toIndentedString(pm25)).append("\n");
    sb.append("    pm10: ").append(toIndentedString(pm10)).append("\n");
    sb.append("    co: ").append(toIndentedString(co)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("co", "no", "no2", "o3", "so2", "pm2_5", "pm10", "nh3" ));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Data25AirPollutionGet200ResponseListInnerComponents
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Data25AirPollutionGet200ResponseListInnerComponents.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in Data25AirPollutionGet200ResponseListInnerComponents is not found in the empty JSON string", Data25AirPollutionGet200ResponseListInnerComponents.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Data25AirPollutionGet200ResponseListInnerComponents.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `Data25AirPollutionGet200ResponseListInnerComponents` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Data25AirPollutionGet200ResponseListInnerComponents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Data25AirPollutionGet200ResponseListInnerComponents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Data25AirPollutionGet200ResponseListInnerComponents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Data25AirPollutionGet200ResponseListInnerComponents.class));

       return (TypeAdapter<T>) new TypeAdapter<Data25AirPollutionGet200ResponseListInnerComponents>() {
           @Override
           public void write(JsonWriter out, Data25AirPollutionGet200ResponseListInnerComponents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Data25AirPollutionGet200ResponseListInnerComponents read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Data25AirPollutionGet200ResponseListInnerComponents given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Data25AirPollutionGet200ResponseListInnerComponents
   * @throws IOException if the JSON string is invalid with respect to Data25AirPollutionGet200ResponseListInnerComponents
   */
  public static Data25AirPollutionGet200ResponseListInnerComponents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Data25AirPollutionGet200ResponseListInnerComponents.class);
  }

  /**
   * Convert an instance of Data25AirPollutionGet200ResponseListInnerComponents to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

