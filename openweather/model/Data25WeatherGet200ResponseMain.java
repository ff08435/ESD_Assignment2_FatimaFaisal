/*
 * OpenWeather Proxy API
 * API for fetching weather, air quality, and geocoding data from OpenWeatherMap.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package openweather.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import openweather.JSON;

/**
 * Data25WeatherGet200ResponseMain
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-15T07:32:12.530684852Z[Etc/UTC]", comments = "Generator version: 7.17.0-SNAPSHOT")
public class Data25WeatherGet200ResponseMain {
  public static final String SERIALIZED_NAME_TEMP = "temp";
  @SerializedName(SERIALIZED_NAME_TEMP)
  @javax.annotation.Nullable
  private BigDecimal temp;

  public static final String SERIALIZED_NAME_FEELS_LIKE = "feels_like";
  @SerializedName(SERIALIZED_NAME_FEELS_LIKE)
  @javax.annotation.Nullable
  private BigDecimal feelsLike;

  public static final String SERIALIZED_NAME_HUMIDITY = "humidity";
  @SerializedName(SERIALIZED_NAME_HUMIDITY)
  @javax.annotation.Nullable
  private BigDecimal humidity;

  public Data25WeatherGet200ResponseMain() {
  }

  public Data25WeatherGet200ResponseMain temp(@javax.annotation.Nullable BigDecimal temp) {
    this.temp = temp;
    return this;
  }

  /**
   * Get temp
   * @return temp
   */
  @javax.annotation.Nullable
  public BigDecimal getTemp() {
    return temp;
  }

  public void setTemp(@javax.annotation.Nullable BigDecimal temp) {
    this.temp = temp;
  }


  public Data25WeatherGet200ResponseMain feelsLike(@javax.annotation.Nullable BigDecimal feelsLike) {
    this.feelsLike = feelsLike;
    return this;
  }

  /**
   * Get feelsLike
   * @return feelsLike
   */
  @javax.annotation.Nullable
  public BigDecimal getFeelsLike() {
    return feelsLike;
  }

  public void setFeelsLike(@javax.annotation.Nullable BigDecimal feelsLike) {
    this.feelsLike = feelsLike;
  }


  public Data25WeatherGet200ResponseMain humidity(@javax.annotation.Nullable BigDecimal humidity) {
    this.humidity = humidity;
    return this;
  }

  /**
   * Get humidity
   * @return humidity
   */
  @javax.annotation.Nullable
  public BigDecimal getHumidity() {
    return humidity;
  }

  public void setHumidity(@javax.annotation.Nullable BigDecimal humidity) {
    this.humidity = humidity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Data25WeatherGet200ResponseMain data25WeatherGet200ResponseMain = (Data25WeatherGet200ResponseMain) o;
    return Objects.equals(this.temp, data25WeatherGet200ResponseMain.temp) &&
        Objects.equals(this.feelsLike, data25WeatherGet200ResponseMain.feelsLike) &&
        Objects.equals(this.humidity, data25WeatherGet200ResponseMain.humidity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(temp, feelsLike, humidity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Data25WeatherGet200ResponseMain {\n");
    sb.append("    temp: ").append(toIndentedString(temp)).append("\n");
    sb.append("    feelsLike: ").append(toIndentedString(feelsLike)).append("\n");
    sb.append("    humidity: ").append(toIndentedString(humidity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("temp", "feels_like", "temp_min", "temp_max", "pressure", "humidity", "sea_level", "grnd_level", "temp_kf"
));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Data25WeatherGet200ResponseMain
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Data25WeatherGet200ResponseMain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in Data25WeatherGet200ResponseMain is not found in the empty JSON string", Data25WeatherGet200ResponseMain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Data25WeatherGet200ResponseMain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `Data25WeatherGet200ResponseMain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Data25WeatherGet200ResponseMain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Data25WeatherGet200ResponseMain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Data25WeatherGet200ResponseMain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Data25WeatherGet200ResponseMain.class));

       return (TypeAdapter<T>) new TypeAdapter<Data25WeatherGet200ResponseMain>() {
           @Override
           public void write(JsonWriter out, Data25WeatherGet200ResponseMain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Data25WeatherGet200ResponseMain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Data25WeatherGet200ResponseMain given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Data25WeatherGet200ResponseMain
   * @throws IOException if the JSON string is invalid with respect to Data25WeatherGet200ResponseMain
   */
  public static Data25WeatherGet200ResponseMain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Data25WeatherGet200ResponseMain.class);
  }

  /**
   * Convert an instance of Data25WeatherGet200ResponseMain to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

