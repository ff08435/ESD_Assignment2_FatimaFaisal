/*
 * OpenWeather Proxy API
 * API for fetching weather, air quality, and geocoding data from OpenWeatherMap.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Data25WeatherGet200ResponseWeatherInner
 */
@JsonPropertyOrder({
  Data25WeatherGet200ResponseWeatherInner.JSON_PROPERTY_DESCRIPTION,
  Data25WeatherGet200ResponseWeatherInner.JSON_PROPERTY_MAIN
})
@JsonTypeName("_data_2_5_weather_get_200_response_weather_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-15T16:22:21.557714607Z[Etc/UTC]", comments = "Generator version: 7.17.0-SNAPSHOT")
public class Data25WeatherGet200ResponseWeatherInner {
  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_MAIN = "main";
  @javax.annotation.Nullable
  private String main;

  public Data25WeatherGet200ResponseWeatherInner() {
  }

  public Data25WeatherGet200ResponseWeatherInner description(@javax.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DESCRIPTION, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(value = JSON_PROPERTY_DESCRIPTION, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public Data25WeatherGet200ResponseWeatherInner main(@javax.annotation.Nullable String main) {
    
    this.main = main;
    return this;
  }

  /**
   * Get main
   * @return main
   */
  @javax.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_MAIN, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMain() {
    return main;
  }


  @JsonProperty(value = JSON_PROPERTY_MAIN, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMain(@javax.annotation.Nullable String main) {
    this.main = main;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Data25WeatherGet200ResponseWeatherInner data25WeatherGet200ResponseWeatherInner = (Data25WeatherGet200ResponseWeatherInner) o;
    return Objects.equals(this.description, data25WeatherGet200ResponseWeatherInner.description) &&
        Objects.equals(this.main, data25WeatherGet200ResponseWeatherInner.main);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, main);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Data25WeatherGet200ResponseWeatherInner {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    main: ").append(toIndentedString(main)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

